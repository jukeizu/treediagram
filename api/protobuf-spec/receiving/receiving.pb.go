// Code generated by protoc-gen-go. DO NOT EDIT.
// source: receiving.proto

package receiving

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type User struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *User) Reset()         { *m = User{} }
func (m *User) String() string { return proto.CompactTextString(m) }
func (*User) ProtoMessage()    {}
func (*User) Descriptor() ([]byte, []int) {
	return fileDescriptor_receiving_9833ad48c9ea8d29, []int{0}
}
func (m *User) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_User.Unmarshal(m, b)
}
func (m *User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_User.Marshal(b, m, deterministic)
}
func (dst *User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User.Merge(dst, src)
}
func (m *User) XXX_Size() int {
	return xxx_messageInfo_User.Size(m)
}
func (m *User) XXX_DiscardUnknown() {
	xxx_messageInfo_User.DiscardUnknown(m)
}

var xxx_messageInfo_User proto.InternalMessageInfo

func (m *User) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *User) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Message struct {
	Source               string   `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	CorrelationId        string   `protobuf:"bytes,2,opt,name=correlationId,proto3" json:"correlationId,omitempty"`
	Bot                  *User    `protobuf:"bytes,3,opt,name=bot,proto3" json:"bot,omitempty"`
	Author               *User    `protobuf:"bytes,4,opt,name=author,proto3" json:"author,omitempty"`
	ChannelId            string   `protobuf:"bytes,5,opt,name=channelId,proto3" json:"channelId,omitempty"`
	ServerId             string   `protobuf:"bytes,6,opt,name=serverId,proto3" json:"serverId,omitempty"`
	Mentions             []*User  `protobuf:"bytes,7,rep,name=mentions,proto3" json:"mentions,omitempty"`
	Content              string   `protobuf:"bytes,8,opt,name=content,proto3" json:"content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_receiving_9833ad48c9ea8d29, []int{1}
}
func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (dst *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(dst, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *Message) GetCorrelationId() string {
	if m != nil {
		return m.CorrelationId
	}
	return ""
}

func (m *Message) GetBot() *User {
	if m != nil {
		return m.Bot
	}
	return nil
}

func (m *Message) GetAuthor() *User {
	if m != nil {
		return m.Author
	}
	return nil
}

func (m *Message) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

func (m *Message) GetServerId() string {
	if m != nil {
		return m.ServerId
	}
	return ""
}

func (m *Message) GetMentions() []*User {
	if m != nil {
		return m.Mentions
	}
	return nil
}

func (m *Message) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type Reply struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Reply) Reset()         { *m = Reply{} }
func (m *Reply) String() string { return proto.CompactTextString(m) }
func (*Reply) ProtoMessage()    {}
func (*Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_receiving_9833ad48c9ea8d29, []int{2}
}
func (m *Reply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Reply.Unmarshal(m, b)
}
func (m *Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Reply.Marshal(b, m, deterministic)
}
func (dst *Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Reply.Merge(dst, src)
}
func (m *Reply) XXX_Size() int {
	return xxx_messageInfo_Reply.Size(m)
}
func (m *Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_Reply proto.InternalMessageInfo

func (m *Reply) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func init() {
	proto.RegisterType((*User)(nil), "receiving.User")
	proto.RegisterType((*Message)(nil), "receiving.Message")
	proto.RegisterType((*Reply)(nil), "receiving.Reply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ReceivingClient is the client API for Receiving service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ReceivingClient interface {
	Send(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Reply, error)
}

type receivingClient struct {
	cc *grpc.ClientConn
}

func NewReceivingClient(cc *grpc.ClientConn) ReceivingClient {
	return &receivingClient{cc}
}

func (c *receivingClient) Send(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/receiving.Receiving/Send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReceivingServer is the server API for Receiving service.
type ReceivingServer interface {
	Send(context.Context, *Message) (*Reply, error)
}

func RegisterReceivingServer(s *grpc.Server, srv ReceivingServer) {
	s.RegisterService(&_Receiving_serviceDesc, srv)
}

func _Receiving_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceivingServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/receiving.Receiving/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceivingServer).Send(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

var _Receiving_serviceDesc = grpc.ServiceDesc{
	ServiceName: "receiving.Receiving",
	HandlerType: (*ReceivingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _Receiving_Send_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "receiving.proto",
}

func init() { proto.RegisterFile("receiving.proto", fileDescriptor_receiving_9833ad48c9ea8d29) }

var fileDescriptor_receiving_9833ad48c9ea8d29 = []byte{
	// 272 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x51, 0xcb, 0x4e, 0xc3, 0x30,
	0x10, 0x24, 0x8f, 0xe6, 0xb1, 0x08, 0x8a, 0xf6, 0x00, 0x56, 0xc5, 0x21, 0x44, 0x48, 0x54, 0x20,
	0xe5, 0x50, 0x8e, 0x7c, 0x41, 0x0e, 0x5c, 0x82, 0xf8, 0x80, 0x34, 0x5e, 0xb5, 0x96, 0x52, 0xbb,
	0xb2, 0xdd, 0x4a, 0xfc, 0x07, 0x1f, 0x8c, 0x62, 0xb9, 0x69, 0xa9, 0x7a, 0xf3, 0xcc, 0xac, 0x67,
	0x46, 0xbb, 0x30, 0xd5, 0xd4, 0x91, 0xd8, 0x0b, 0xb9, 0xaa, 0xb6, 0x5a, 0x59, 0x85, 0xf9, 0x48,
	0x94, 0xaf, 0x10, 0x7f, 0x1b, 0xd2, 0x78, 0x0b, 0xa1, 0xe0, 0x2c, 0x28, 0x82, 0x79, 0xde, 0x84,
	0x82, 0x23, 0x42, 0x2c, 0xdb, 0x0d, 0xb1, 0xd0, 0x31, 0xee, 0x5d, 0xfe, 0x86, 0x90, 0x7e, 0x92,
	0x31, 0xed, 0x8a, 0xf0, 0x1e, 0x12, 0xa3, 0x76, 0xba, 0x23, 0xff, 0xc7, 0x23, 0x7c, 0x86, 0x9b,
	0x4e, 0x69, 0x4d, 0x7d, 0x6b, 0x85, 0x92, 0x35, 0xf7, 0x06, 0xff, 0x49, 0x7c, 0x82, 0x68, 0xa9,
	0x2c, 0x8b, 0x8a, 0x60, 0x7e, 0xbd, 0x98, 0x56, 0xc7, 0x7e, 0x43, 0x97, 0x66, 0xd0, 0xf0, 0x05,
	0x92, 0x76, 0x67, 0xd7, 0x4a, 0xb3, 0xf8, 0xf2, 0x94, 0x97, 0xf1, 0x11, 0xf2, 0x6e, 0xdd, 0x4a,
	0x49, 0x7d, 0xcd, 0xd9, 0xc4, 0xa5, 0x1d, 0x09, 0x9c, 0x41, 0x66, 0x48, 0xef, 0x49, 0xd7, 0x9c,
	0x25, 0x4e, 0x1c, 0x31, 0xbe, 0x41, 0xb6, 0x21, 0x39, 0x54, 0x32, 0x2c, 0x2d, 0xa2, 0x4b, 0x21,
	0xe3, 0x00, 0x32, 0x48, 0x3b, 0x25, 0x2d, 0x49, 0xcb, 0x32, 0xe7, 0x73, 0x80, 0xe5, 0x03, 0x4c,
	0x1a, 0xda, 0xf6, 0x3f, 0xe7, 0x3b, 0x5c, 0x7c, 0x40, 0xde, 0x1c, 0xec, 0xb0, 0x82, 0xf8, 0x8b,
	0x24, 0x47, 0x3c, 0x89, 0xf0, 0xcb, 0x9c, 0xdd, 0x9d, 0x70, 0xce, 0xaa, 0xbc, 0x5a, 0x26, 0xee,
	0x54, 0xef, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x5a, 0x45, 0x69, 0xcf, 0xbd, 0x01, 0x00, 0x00,
}
