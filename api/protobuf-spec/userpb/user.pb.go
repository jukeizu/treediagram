// Code generated by protoc-gen-go. DO NOT EDIT.
// source: user.proto

package userpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Preference struct {
	UserId               string   `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	ServerId             string   `protobuf:"bytes,2,opt,name=serverId,proto3" json:"serverId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Preference) Reset()         { *m = Preference{} }
func (m *Preference) String() string { return proto.CompactTextString(m) }
func (*Preference) ProtoMessage()    {}
func (*Preference) Descriptor() ([]byte, []int) {
	return fileDescriptor_user_b9ce7c091ebd09c0, []int{0}
}
func (m *Preference) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Preference.Unmarshal(m, b)
}
func (m *Preference) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Preference.Marshal(b, m, deterministic)
}
func (dst *Preference) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Preference.Merge(dst, src)
}
func (m *Preference) XXX_Size() int {
	return xxx_messageInfo_Preference.Size(m)
}
func (m *Preference) XXX_DiscardUnknown() {
	xxx_messageInfo_Preference.DiscardUnknown(m)
}

var xxx_messageInfo_Preference proto.InternalMessageInfo

func (m *Preference) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *Preference) GetServerId() string {
	if m != nil {
		return m.ServerId
	}
	return ""
}

type PreferenceRequest struct {
	UserId               string   `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PreferenceRequest) Reset()         { *m = PreferenceRequest{} }
func (m *PreferenceRequest) String() string { return proto.CompactTextString(m) }
func (*PreferenceRequest) ProtoMessage()    {}
func (*PreferenceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_user_b9ce7c091ebd09c0, []int{1}
}
func (m *PreferenceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PreferenceRequest.Unmarshal(m, b)
}
func (m *PreferenceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PreferenceRequest.Marshal(b, m, deterministic)
}
func (dst *PreferenceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PreferenceRequest.Merge(dst, src)
}
func (m *PreferenceRequest) XXX_Size() int {
	return xxx_messageInfo_PreferenceRequest.Size(m)
}
func (m *PreferenceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PreferenceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PreferenceRequest proto.InternalMessageInfo

func (m *PreferenceRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

type PreferenceReply struct {
	Preference           *Preference `protobuf:"bytes,1,opt,name=preference,proto3" json:"preference,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *PreferenceReply) Reset()         { *m = PreferenceReply{} }
func (m *PreferenceReply) String() string { return proto.CompactTextString(m) }
func (*PreferenceReply) ProtoMessage()    {}
func (*PreferenceReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_user_b9ce7c091ebd09c0, []int{2}
}
func (m *PreferenceReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PreferenceReply.Unmarshal(m, b)
}
func (m *PreferenceReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PreferenceReply.Marshal(b, m, deterministic)
}
func (dst *PreferenceReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PreferenceReply.Merge(dst, src)
}
func (m *PreferenceReply) XXX_Size() int {
	return xxx_messageInfo_PreferenceReply.Size(m)
}
func (m *PreferenceReply) XXX_DiscardUnknown() {
	xxx_messageInfo_PreferenceReply.DiscardUnknown(m)
}

var xxx_messageInfo_PreferenceReply proto.InternalMessageInfo

func (m *PreferenceReply) GetPreference() *Preference {
	if m != nil {
		return m.Preference
	}
	return nil
}

type SetServerRequest struct {
	UserId               string   `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	ServerId             string   `protobuf:"bytes,2,opt,name=serverId,proto3" json:"serverId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetServerRequest) Reset()         { *m = SetServerRequest{} }
func (m *SetServerRequest) String() string { return proto.CompactTextString(m) }
func (*SetServerRequest) ProtoMessage()    {}
func (*SetServerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_user_b9ce7c091ebd09c0, []int{3}
}
func (m *SetServerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetServerRequest.Unmarshal(m, b)
}
func (m *SetServerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetServerRequest.Marshal(b, m, deterministic)
}
func (dst *SetServerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetServerRequest.Merge(dst, src)
}
func (m *SetServerRequest) XXX_Size() int {
	return xxx_messageInfo_SetServerRequest.Size(m)
}
func (m *SetServerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetServerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetServerRequest proto.InternalMessageInfo

func (m *SetServerRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *SetServerRequest) GetServerId() string {
	if m != nil {
		return m.ServerId
	}
	return ""
}

func init() {
	proto.RegisterType((*Preference)(nil), "userpb.Preference")
	proto.RegisterType((*PreferenceRequest)(nil), "userpb.PreferenceRequest")
	proto.RegisterType((*PreferenceReply)(nil), "userpb.PreferenceReply")
	proto.RegisterType((*SetServerRequest)(nil), "userpb.SetServerRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserClient interface {
	Preference(ctx context.Context, in *PreferenceRequest, opts ...grpc.CallOption) (*PreferenceReply, error)
	SetServer(ctx context.Context, in *SetServerRequest, opts ...grpc.CallOption) (*PreferenceReply, error)
}

type userClient struct {
	cc *grpc.ClientConn
}

func NewUserClient(cc *grpc.ClientConn) UserClient {
	return &userClient{cc}
}

func (c *userClient) Preference(ctx context.Context, in *PreferenceRequest, opts ...grpc.CallOption) (*PreferenceReply, error) {
	out := new(PreferenceReply)
	err := c.cc.Invoke(ctx, "/userpb.User/Preference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) SetServer(ctx context.Context, in *SetServerRequest, opts ...grpc.CallOption) (*PreferenceReply, error) {
	out := new(PreferenceReply)
	err := c.cc.Invoke(ctx, "/userpb.User/SetServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServer is the server API for User service.
type UserServer interface {
	Preference(context.Context, *PreferenceRequest) (*PreferenceReply, error)
	SetServer(context.Context, *SetServerRequest) (*PreferenceReply, error)
}

func RegisterUserServer(s *grpc.Server, srv UserServer) {
	s.RegisterService(&_User_serviceDesc, srv)
}

func _User_Preference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PreferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Preference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userpb.User/Preference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Preference(ctx, req.(*PreferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_SetServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).SetServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userpb.User/SetServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).SetServer(ctx, req.(*SetServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _User_serviceDesc = grpc.ServiceDesc{
	ServiceName: "userpb.User",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Preference",
			Handler:    _User_Preference_Handler,
		},
		{
			MethodName: "SetServer",
			Handler:    _User_SetServer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}

func init() { proto.RegisterFile("user.proto", fileDescriptor_user_b9ce7c091ebd09c0) }

var fileDescriptor_user_b9ce7c091ebd09c0 = []byte{
	// 195 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2a, 0x2d, 0x4e, 0x2d,
	0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x03, 0xb1, 0x0b, 0x92, 0x94, 0x1c, 0xb8, 0xb8,
	0x02, 0x8a, 0x52, 0xd3, 0x52, 0x8b, 0x52, 0xf3, 0x92, 0x53, 0x85, 0xc4, 0xb8, 0xc0, 0xe2, 0x9e,
	0x29, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x50, 0x9e, 0x90, 0x14, 0x17, 0x47, 0x71, 0x6a,
	0x51, 0x19, 0x58, 0x86, 0x09, 0x2c, 0x03, 0xe7, 0x2b, 0x69, 0x73, 0x09, 0x22, 0x4c, 0x08, 0x4a,
	0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0xc1, 0x65, 0x90, 0x92, 0x2b, 0x17, 0x3f, 0xb2, 0xe2, 0x82, 0x9c,
	0x4a, 0x21, 0x23, 0x2e, 0xae, 0x02, 0xb8, 0x10, 0x58, 0x39, 0xb7, 0x91, 0x90, 0x1e, 0xc4, 0x79,
	0x7a, 0x48, 0x8a, 0x91, 0x54, 0x29, 0xb9, 0x71, 0x09, 0x04, 0xa7, 0x96, 0x04, 0x83, 0x9d, 0x40,
	0xc0, 0x4a, 0x7c, 0x6e, 0x37, 0xea, 0x61, 0xe4, 0x62, 0x09, 0x2d, 0x4e, 0x2d, 0x12, 0x72, 0x42,
	0x09, 0x06, 0x49, 0x2c, 0xd6, 0x43, 0x6c, 0x91, 0x12, 0xc7, 0x26, 0x55, 0x90, 0x53, 0xa9, 0xc4,
	0x20, 0xe4, 0xc0, 0xc5, 0x09, 0x77, 0x94, 0x90, 0x04, 0x4c, 0x1d, 0xba, 0x3b, 0xf1, 0x98, 0x90,
	0xc4, 0x06, 0x8e, 0x1b, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0xfe, 0xd6, 0xd8, 0x10, 0xa9,
	0x01, 0x00, 0x00,
}
