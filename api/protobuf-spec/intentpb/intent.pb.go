// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.11.4
// source: intent.proto

package intentpb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Intent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ServerId string `protobuf:"bytes,2,opt,name=serverId,proto3" json:"serverId,omitempty"`
	Name     string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Regex    string `protobuf:"bytes,4,opt,name=regex,proto3" json:"regex,omitempty"`
	Mention  bool   `protobuf:"varint,5,opt,name=mention,proto3" json:"mention,omitempty"`
	Response string `protobuf:"bytes,6,opt,name=response,proto3" json:"response,omitempty"`
	Endpoint string `protobuf:"bytes,7,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	Help     string `protobuf:"bytes,8,opt,name=help,proto3" json:"help,omitempty"`
	Enabled  bool   `protobuf:"varint,9,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Created  int32  `protobuf:"varint,10,opt,name=created,proto3" json:"created,omitempty"`
	Type     string `protobuf:"bytes,11,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *Intent) Reset() {
	*x = Intent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_intent_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Intent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Intent) ProtoMessage() {}

func (x *Intent) ProtoReflect() protoreflect.Message {
	mi := &file_intent_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Intent.ProtoReflect.Descriptor instead.
func (*Intent) Descriptor() ([]byte, []int) {
	return file_intent_proto_rawDescGZIP(), []int{0}
}

func (x *Intent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Intent) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

func (x *Intent) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Intent) GetRegex() string {
	if x != nil {
		return x.Regex
	}
	return ""
}

func (x *Intent) GetMention() bool {
	if x != nil {
		return x.Mention
	}
	return false
}

func (x *Intent) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

func (x *Intent) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *Intent) GetHelp() string {
	if x != nil {
		return x.Help
	}
	return ""
}

func (x *Intent) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *Intent) GetCreated() int32 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *Intent) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type QueryIntentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId string `protobuf:"bytes,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
	Type     string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *QueryIntentsRequest) Reset() {
	*x = QueryIntentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_intent_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryIntentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryIntentsRequest) ProtoMessage() {}

func (x *QueryIntentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_intent_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryIntentsRequest.ProtoReflect.Descriptor instead.
func (*QueryIntentsRequest) Descriptor() ([]byte, []int) {
	return file_intent_proto_rawDescGZIP(), []int{1}
}

func (x *QueryIntentsRequest) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

func (x *QueryIntentsRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type AddIntentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Intent *Intent `protobuf:"bytes,1,opt,name=intent,proto3" json:"intent,omitempty"`
}

func (x *AddIntentRequest) Reset() {
	*x = AddIntentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_intent_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddIntentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddIntentRequest) ProtoMessage() {}

func (x *AddIntentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_intent_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddIntentRequest.ProtoReflect.Descriptor instead.
func (*AddIntentRequest) Descriptor() ([]byte, []int) {
	return file_intent_proto_rawDescGZIP(), []int{2}
}

func (x *AddIntentRequest) GetIntent() *Intent {
	if x != nil {
		return x.Intent
	}
	return nil
}

type AddIntentReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Intent *Intent `protobuf:"bytes,1,opt,name=intent,proto3" json:"intent,omitempty"`
}

func (x *AddIntentReply) Reset() {
	*x = AddIntentReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_intent_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddIntentReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddIntentReply) ProtoMessage() {}

func (x *AddIntentReply) ProtoReflect() protoreflect.Message {
	mi := &file_intent_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddIntentReply.ProtoReflect.Descriptor instead.
func (*AddIntentReply) Descriptor() ([]byte, []int) {
	return file_intent_proto_rawDescGZIP(), []int{3}
}

func (x *AddIntentReply) GetIntent() *Intent {
	if x != nil {
		return x.Intent
	}
	return nil
}

type DisableIntentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DisableIntentRequest) Reset() {
	*x = DisableIntentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_intent_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisableIntentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableIntentRequest) ProtoMessage() {}

func (x *DisableIntentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_intent_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableIntentRequest.ProtoReflect.Descriptor instead.
func (*DisableIntentRequest) Descriptor() ([]byte, []int) {
	return file_intent_proto_rawDescGZIP(), []int{4}
}

func (x *DisableIntentRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DisableIntentReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DisableIntentReply) Reset() {
	*x = DisableIntentReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_intent_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisableIntentReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableIntentReply) ProtoMessage() {}

func (x *DisableIntentReply) ProtoReflect() protoreflect.Message {
	mi := &file_intent_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableIntentReply.ProtoReflect.Descriptor instead.
func (*DisableIntentReply) Descriptor() ([]byte, []int) {
	return file_intent_proto_rawDescGZIP(), []int{5}
}

func (x *DisableIntentReply) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

var File_intent_proto protoreflect.FileDescriptor

var file_intent_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08,
	0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x22, 0x8c, 0x02, 0x0a, 0x06, 0x49, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x67, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x67, 0x65, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x6e,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6d, 0x65, 0x6e, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68,
	0x65, 0x6c, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x65, 0x6c, 0x70, 0x12,
	0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x45, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3c,
	0x0a, 0x10, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x28, 0x0a, 0x06, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x3a, 0x0a, 0x0e,
	0x41, 0x64, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x28,
	0x0a, 0x06, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x52, 0x06, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x26, 0x0a, 0x14, 0x44, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x24, 0x0a, 0x12, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x32, 0xeb, 0x01, 0x0a, 0x0e, 0x49, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x12, 0x43, 0x0a, 0x09, 0x41, 0x64, 0x64,
	0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x70,
	0x62, 0x2e, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x18, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x41, 0x64,
	0x64, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4f,
	0x0a, 0x0d, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x1e, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x44, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1c, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x44, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
	0x43, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x1d, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x22, 0x00, 0x30, 0x01, 0x42, 0x0c, 0x5a, 0x0a, 0x2e, 0x3b, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_intent_proto_rawDescOnce sync.Once
	file_intent_proto_rawDescData = file_intent_proto_rawDesc
)

func file_intent_proto_rawDescGZIP() []byte {
	file_intent_proto_rawDescOnce.Do(func() {
		file_intent_proto_rawDescData = protoimpl.X.CompressGZIP(file_intent_proto_rawDescData)
	})
	return file_intent_proto_rawDescData
}

var file_intent_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_intent_proto_goTypes = []interface{}{
	(*Intent)(nil),               // 0: intentpb.Intent
	(*QueryIntentsRequest)(nil),  // 1: intentpb.QueryIntentsRequest
	(*AddIntentRequest)(nil),     // 2: intentpb.AddIntentRequest
	(*AddIntentReply)(nil),       // 3: intentpb.AddIntentReply
	(*DisableIntentRequest)(nil), // 4: intentpb.DisableIntentRequest
	(*DisableIntentReply)(nil),   // 5: intentpb.DisableIntentReply
}
var file_intent_proto_depIdxs = []int32{
	0, // 0: intentpb.AddIntentRequest.intent:type_name -> intentpb.Intent
	0, // 1: intentpb.AddIntentReply.intent:type_name -> intentpb.Intent
	2, // 2: intentpb.IntentRegistry.AddIntent:input_type -> intentpb.AddIntentRequest
	4, // 3: intentpb.IntentRegistry.DisableIntent:input_type -> intentpb.DisableIntentRequest
	1, // 4: intentpb.IntentRegistry.QueryIntents:input_type -> intentpb.QueryIntentsRequest
	3, // 5: intentpb.IntentRegistry.AddIntent:output_type -> intentpb.AddIntentReply
	5, // 6: intentpb.IntentRegistry.DisableIntent:output_type -> intentpb.DisableIntentReply
	0, // 7: intentpb.IntentRegistry.QueryIntents:output_type -> intentpb.Intent
	5, // [5:8] is the sub-list for method output_type
	2, // [2:5] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_intent_proto_init() }
func file_intent_proto_init() {
	if File_intent_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_intent_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Intent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_intent_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryIntentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_intent_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddIntentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_intent_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddIntentReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_intent_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisableIntentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_intent_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisableIntentReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_intent_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_intent_proto_goTypes,
		DependencyIndexes: file_intent_proto_depIdxs,
		MessageInfos:      file_intent_proto_msgTypes,
	}.Build()
	File_intent_proto = out.File
	file_intent_proto_rawDesc = nil
	file_intent_proto_goTypes = nil
	file_intent_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// IntentRegistryClient is the client API for IntentRegistry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IntentRegistryClient interface {
	AddIntent(ctx context.Context, in *AddIntentRequest, opts ...grpc.CallOption) (*AddIntentReply, error)
	DisableIntent(ctx context.Context, in *DisableIntentRequest, opts ...grpc.CallOption) (*DisableIntentReply, error)
	QueryIntents(ctx context.Context, in *QueryIntentsRequest, opts ...grpc.CallOption) (IntentRegistry_QueryIntentsClient, error)
}

type intentRegistryClient struct {
	cc grpc.ClientConnInterface
}

func NewIntentRegistryClient(cc grpc.ClientConnInterface) IntentRegistryClient {
	return &intentRegistryClient{cc}
}

func (c *intentRegistryClient) AddIntent(ctx context.Context, in *AddIntentRequest, opts ...grpc.CallOption) (*AddIntentReply, error) {
	out := new(AddIntentReply)
	err := c.cc.Invoke(ctx, "/intentpb.IntentRegistry/AddIntent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intentRegistryClient) DisableIntent(ctx context.Context, in *DisableIntentRequest, opts ...grpc.CallOption) (*DisableIntentReply, error) {
	out := new(DisableIntentReply)
	err := c.cc.Invoke(ctx, "/intentpb.IntentRegistry/DisableIntent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intentRegistryClient) QueryIntents(ctx context.Context, in *QueryIntentsRequest, opts ...grpc.CallOption) (IntentRegistry_QueryIntentsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_IntentRegistry_serviceDesc.Streams[0], "/intentpb.IntentRegistry/QueryIntents", opts...)
	if err != nil {
		return nil, err
	}
	x := &intentRegistryQueryIntentsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type IntentRegistry_QueryIntentsClient interface {
	Recv() (*Intent, error)
	grpc.ClientStream
}

type intentRegistryQueryIntentsClient struct {
	grpc.ClientStream
}

func (x *intentRegistryQueryIntentsClient) Recv() (*Intent, error) {
	m := new(Intent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// IntentRegistryServer is the server API for IntentRegistry service.
type IntentRegistryServer interface {
	AddIntent(context.Context, *AddIntentRequest) (*AddIntentReply, error)
	DisableIntent(context.Context, *DisableIntentRequest) (*DisableIntentReply, error)
	QueryIntents(*QueryIntentsRequest, IntentRegistry_QueryIntentsServer) error
}

// UnimplementedIntentRegistryServer can be embedded to have forward compatible implementations.
type UnimplementedIntentRegistryServer struct {
}

func (*UnimplementedIntentRegistryServer) AddIntent(context.Context, *AddIntentRequest) (*AddIntentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddIntent not implemented")
}
func (*UnimplementedIntentRegistryServer) DisableIntent(context.Context, *DisableIntentRequest) (*DisableIntentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableIntent not implemented")
}
func (*UnimplementedIntentRegistryServer) QueryIntents(*QueryIntentsRequest, IntentRegistry_QueryIntentsServer) error {
	return status.Errorf(codes.Unimplemented, "method QueryIntents not implemented")
}

func RegisterIntentRegistryServer(s *grpc.Server, srv IntentRegistryServer) {
	s.RegisterService(&_IntentRegistry_serviceDesc, srv)
}

func _IntentRegistry_AddIntent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddIntentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntentRegistryServer).AddIntent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/intentpb.IntentRegistry/AddIntent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntentRegistryServer).AddIntent(ctx, req.(*AddIntentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntentRegistry_DisableIntent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableIntentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntentRegistryServer).DisableIntent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/intentpb.IntentRegistry/DisableIntent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntentRegistryServer).DisableIntent(ctx, req.(*DisableIntentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntentRegistry_QueryIntents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QueryIntentsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(IntentRegistryServer).QueryIntents(m, &intentRegistryQueryIntentsServer{stream})
}

type IntentRegistry_QueryIntentsServer interface {
	Send(*Intent) error
	grpc.ServerStream
}

type intentRegistryQueryIntentsServer struct {
	grpc.ServerStream
}

func (x *intentRegistryQueryIntentsServer) Send(m *Intent) error {
	return x.ServerStream.SendMsg(m)
}

var _IntentRegistry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "intentpb.IntentRegistry",
	HandlerType: (*IntentRegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddIntent",
			Handler:    _IntentRegistry_AddIntent_Handler,
		},
		{
			MethodName: "DisableIntent",
			Handler:    _IntentRegistry_DisableIntent_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "QueryIntents",
			Handler:       _IntentRegistry_QueryIntents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "intent.proto",
}
